---
import type { MarkdownInstance } from "astro";

export type Frontmatter = {
  title: string;
  description: string;
  tags: string[];
  updated_at: string;
};

export type PostRef = {
  created_at: string;
  slug: string;
};

export type Markdown = {
  ref: PostRef;
  frontmatter: Frontmatter;
  Content: MarkdownInstance<Record<string, any>>;
};

export const pathToPostRef = (path: string): PostRef => {
  const result = path.match(/\/(\d+-\d+-\d+)_([^/]+)\/index\.md$/);

  return {
    created_at: result![1],
    slug: result![2],
  };
};

export const all = async () => {
  const markdowns = await Astro.glob("/contents/posts/*/index.md");

  return markdowns
    .map((markdown) => {
      const { file, frontmatter } = markdown;
      const postRef = pathToPostRef(file);

      return {
        postRef: postRef,
        frontmatter: {
          title: frontmatter.title,
          description: frontmatter.description,
          tags: frontmatter.tags,
          updated_at: frontmatter.updated_at,
        },
        Content: markdown.Content,
      };
    })
    .sort((a, b) => -a.postRef.created_at.localeCompare(b.postRef.created_at));
};
---
